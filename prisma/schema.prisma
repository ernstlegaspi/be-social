generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "mongodb"
	url      = env("DATABASE_URL")
}

model User {
	id String @id @default(auto()) @map("_id") @db.ObjectId
	email String @unique
	name String
	password String
	userName String
	picture String?
	interests String[]
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	post Post[]
	followers Followers[]
	following Following[]
}

model Post {
	id String @id @default(auto()) @map("_id") @db.ObjectId

	body String
	picture String
	name String
	interests String[]
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	userId String @db.ObjectId
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	likes Likes[]
	comments Comments[]
}

model Following {
	id String @id @default(auto()) @map("_id") @db.ObjectId

	otherUserId String[] @db.ObjectId

	userId String @db.ObjectId
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Followers {
	id String @id @default(auto()) @map("_id") @db.ObjectId

	userId String @db.ObjectId
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Likes {
	id String @id @default(auto()) @map("_id") @db.ObjectId

	postId String @db.ObjectId
	post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comments {
	id String @id @default(auto()) @map("_id") @db.ObjectId

	postId String @db.ObjectId
	post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
